name: Publish to PyPi

# RELEASE PROCESS
#
# === Manual activities ===
#
# 1. Document human readable changes in CHANGELOG (pre-generate unreleased changes with `make changelog`)
# 2. Bump package version using poetry version <major|minor|patch|specific version>
# 3. Merge version changes to develop branch
# 4. Edit the current draft release notes
# 5. If not already set, use `v<new version>` as a tag, and select develop as target branch
#
# === Automated activities ===
#
# 1. Extract release notes tag that was published
# 2. Ensure release notes tag match what's in CHANGELOG and pyproject
# 3. Run tests, linting, security and complexity base line
# 4. Publish package to PyPi test repository
# 5. Publish package to PyPi prod repository
# 6. Kick off Lambda Layer pipeline to publish latest version with minimal dependencies as a SAR App
# 7. Kick off Lambda Layer pipeline to publish latest version with extra dependencies as a SAR App
# 8. Builds a fresh version of docs including Changelog updates
# 9. Builds latest documentation for new release, and update latest alias pointing to the new release tag
# 10. Close and notify all issues labeled "pending-release" about the release details

#
# === Fallback mechanism due to external failures ===
#
# 1. Trigger "Publish to PyPi" workflow manually: https://docs.github.com/en/actions/managing-workflow-runs/manually-running-a-workflow
# 2. Use the version released under Releases e.g. v1.13.0
#

#
# === Documentation hotfix ===
#
# Look for rebuild latest docs workflow

on:
  release:
    types: [published]

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      RELEASE_TAG_VERSION: ${{ steps.release_version.outputs.RELEASE_TAG_VERSION }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
      - name: Set release notes tag
        id: release_version
        run: |
          RELEASE_TAG_VERSION=${{ github.event.release.tag_name }}
          echo "RELEASE_TAG_VERSION=${RELEASE_TAG_VERSION:1}" >> $GITHUB_ENV
          echo "::set-output name=RELEASE_TAG_VERSION::${RELEASE_TAG_VERSION}"
      - name: Install dependencies
        run: make dev
      - name: Run all tests, linting and baselines
        run: make pr
      - name: Bump package version
        run: poetry version ${RELEASE_TAG_VERSION}
      - name: Generate latest CHANGELOG
        run: make changelog
      - name: Setup git client
        run: |
          git config user.name "Release bot"
          git config user.email aws-devax-open-source@amazon.com
      - name: Push project metadata and changelog to trunk
        run: |
          git add CHANGELOG.md
          git add pyproject.toml
          git commit -m "chore(ci): update project with version ${RELEASE_TAG_VERSION}"
          git push origin HEAD:refs/heads/develop
      - name: Build python package and wheel
        run: poetry build
      - name: Upload to PyPi test
        run: make release-test
        env:
          PYPI_USERNAME: __token__
          PYPI_TEST_TOKEN: ${{ secrets.PYPI_TEST_TOKEN }}
      - name: Upload to PyPi prod
        run: make release-prod
        env:
          PYPI_USERNAME: __token__
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
      - name: publish lambda layer in SAR by triggering the internal codepipeline
        run: |
          aws ssm put-parameter --name "powertools-python-release-version" --value $RELEASE_TAG_VERSION --overwrite
          aws codepipeline start-pipeline-execution --name ${{ secrets.CODEPIPELINE_NAME }}
        env:
          # Maintenance: Migrate to new OAuth mechanism
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: eu-west-1
          AWS_DEFAULT_OUTPUT: json

  docs:
    needs: release
    runs-on: ubuntu-latest
    env:
      RELEASE_TAG_VERSION: ${{ needs.release.outputs.RELEASE_TAG_VERSION }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Build docs website and API reference
        run: |
          make release-docs VERSION=${RELEASE_TAG_VERSION} ALIAS="latest"
          poetry run mike set-default --push latest
      - name: Release API docs to release version
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./api
          keep_files: true
          destination_dir: ${{ env.RELEASE_TAG_VERSION }}/api
      - name: Release API docs to latest
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./api
          keep_files: true
          destination_dir: latest/api

  post_release:
    needs: release
    runs-on: ubuntu-latest
    env:
      RELEASE_TAG_VERSION: ${{ needs.release.outputs.RELEASE_TAG_VERSION }}
    steps:
      - uses: actions/checkout@v3
      - name: Close issues related to this release
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const post_release = require('.github/scripts/post_release.js')
            await post_release({github, context, core})
