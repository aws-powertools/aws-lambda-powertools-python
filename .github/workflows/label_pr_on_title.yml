name: Label PR based on title

on:
  workflow_run:
    workflows: ["Record PR number"]
    types:
      - completed

jobs:
  get_pr_details:
    if: github.event.workflow_run.event == 'pull_request' && github.event.workflow_run.conclusion == 'success'
    uses: ./.github/workflows/reusable_export_pr_details.yml
    with:
      record_pr_workflow_id: ${{ github.event.workflow_run.id }}
    secrets:
      token: ${{ secrets.GITHUB_TOKEN }}
  label_pr:
    needs: get_pr_details
    runs-on: ubuntu-latest
    # Guardrails to only ever run if PR recording workflow was indeed
    # run in a PR event and ran successfully
    if: >
      ${{ github.event.workflow_run.event == 'pull_request' &&
      github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: "Label PR based on title"
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          # This safely runs in our base repo, not on fork
          # thus allowing us to provide a write access token to label based on PR title
          # and label PR based on semantic title accordingly
          script: |
            const pr_number = ${{ needs.get_pr_details.outputs.prNumber }};
            const pr_title = "${{ needs.get_pr_details.outputs.prTitle }}";

            const FEAT_REGEX = /feat(\((.+)\))?(\:.+)/
            const BUG_REGEX = /(fix|bug)(\((.+)\))?(\:.+)/
            const DOCS_REGEX = /(docs|doc)(\((.+)\))?(\:.+)/
            const CHORE_REGEX = /(chore)(\((.+)\))?(\:.+)/
            const DEPRECATED_REGEX = /(deprecated)(\((.+)\))?(\:.+)/
            const REFACTOR_REGEX = /(refactor)(\((.+)\))?(\:.+)/

            const labels = {
                "feature": FEAT_REGEX,
                "bug": BUG_REGEX,
                "documentation": DOCS_REGEX,
                "internal": CHORE_REGEX,
                "enhancement": REFACTOR_REGEX,
                "deprecated": DEPRECATED_REGEX,
            }

            for (const label in labels) {
                const matcher = new RegExp(labels[label])
                const isMatch = matcher.exec(pr_title)
                if (isMatch != null) {
                    console.info(`Auto-labeling PR ${pr_number} with ${label}`)

                    await github.rest.issues.addLabels({
                      issue_number: pr_number,
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      labels: [label]
                    })

                    break
                }
            }
